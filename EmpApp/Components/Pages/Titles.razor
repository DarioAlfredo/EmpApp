@page "/titles"

@using EmpApp.Components.Models
@using EmpApp.Components.Services.Title
@inject ITitleService TitleService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h1>Titles</h1>

<button class="btn btn-success mb-3" @onclick="AddTitle">New Title</button>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Description</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (titles != null)
        {
            @foreach (var title in titles)
            {
                <tr>
                    <td>@title.EmployeeTitleID</td>
                    <td>@title.Descr</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => EditTitle(title.EmployeeTitleID)">Edit</button>
                        <button class="btn btn-danger btn-sm ms-2" @onclick="() => DeleteTitle(title.EmployeeTitleID)">Delete</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<TitleDto>? titles;

    protected override async Task OnInitializedAsync()
    {
        await LoadTitles();
    }

    private async Task LoadTitles()
    {
        titles = (await TitleService.GetTitlesAsync()).ToList();
    }

    private void AddTitle()
    {
        NavigationManager.NavigateTo("/titles/add");
    }

    private void EditTitle(int id)
    {
        NavigationManager.NavigateTo($"/titles/edit/{id}");
    }

    private async Task DeleteTitle(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete title #{id}?"))
        {
            await TitleService.DeleteTitleAsync(id);
            await LoadTitles();
            StateHasChanged();
        }
    }
}
